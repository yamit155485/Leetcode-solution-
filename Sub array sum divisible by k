#include <vector>
#include <unordered_map>

class Solution {
public:
    int subarraysDivByK(std::vector<int>& nums, int k) {
        // Using a vector of size k is typically faster than an unordered_map
        std::vector<int> count(k, 0); 
        count[0] = 1;
        
        int ans = 0;
        int prefix_sum_mod_k = 0;
        
        for (int num : nums) {
            // Calculate the new prefix sum modulo k and ensure it is non-negative
            prefix_sum_mod_k = (prefix_sum_mod_k + num % k + k) % k;
            
            // Add the frequency of the current remainder to the total count
            ans += count[prefix_sum_mod_k];
            
            // Increment the frequency for the current remainder
            count[prefix_sum_mod_k]++;
        }
        
        return ans;
    }
};
